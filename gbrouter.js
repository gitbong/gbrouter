// Generated by CoffeeScript 1.11.1
(function() {
  var _currHash, _defaultHash, _getHash, _hashMap, _index, _ins, _isStart, _preHash, _router;

  _preHash = -1;

  _currHash = -1;

  _hashMap = {};

  _defaultHash = '';

  _index = 1;

  _isStart = false;

  _getHash = function(url) {
    if (url.indexOf('#') !== -1) {
      return url.substring(url.indexOf('#') + 1);
    } else {
      return '';
    }
  };

  _router = {
    _virtual: false,
    init: function() {
      window.addEventListener('hashchange', function(e) {
        if (_router._virtual === false) {
          return _router._onHashChange(_getHash(e.oldURL), _getHash(e.newURL));
        }
      });
    },
    _onHashChange: function(pre, curr) {
      _preHash = pre;
      if (_hashMap[curr] === void 0) {
        _currHash = _defaultHash;
      } else {
        _currHash = curr;
      }
      if (_router._virtual === false) {
        history.replaceState({
          page: _currHash
        }, 'title', '#' + _currHash);
      }
      if (_preHash !== _currHash) {
        _ins.onHashChange({
          hash: _currHash,
          data: _hashMap[_currHash]
        });
      }
    },
    when: function(hash, config) {
      _hashMap[hash] = config;
      return _ins;
    },
    otherwise: function(hash) {
      _defaultHash = hash;
      return _ins;
    },
    start: function() {
      if (_isStart === true) {
        return _ins;
      }
      _isStart = true;
      _router.init();
      if (_router._virtual === false) {
        _currHash = _getHash(window.location.href);
      } else {
        _currHash = _defaultHash;
      }
      _router._onHashChange(-1, _currHash);
      return _ins;
    },
    goto: function(hash) {
      if (_isStart === false) {
        return;
      }
      _preHash = _currHash;
      _currHash = hash;
      if (this._virtual === false) {
        window.location.hash = hash.split('?')[0];
      } else {
        _router._onHashChange(_preHash, _currHash);
      }
    },
    useVirtualRouter: function(use) {
      _router._virtual = use;
      return _ins;
    },
    onHashChange: function() {
      console.log("Hash changed. pre:" + _preHash + ", curr:" + _currHash);
      return _ins;
    }
  };

  _ins = {
    when: _router.when,
    otherwise: _router.otherwise,
    start: _router.start,
    goto: _router.goto,
    useVirtualRouter: _router.useVirtualRouter,
    onHashChange: _router.onHashChange,
    getConfig: function(hash) {
      if (hash === void 0) {
        return _hashMap;
      } else {
        if (_hashMap[hash] !== null) {
          return _hashMap[hash];
        } else {
          return _hashMap[_defaultHash];
        }
      }
    },
    preHash: function() {
      return _preHash;
    },
    currHash: function() {
      return _currHash;
    }
  };

  window.gbRouter = _ins;

}).call(this);

//# sourceMappingURL=gbRouter.js.map
